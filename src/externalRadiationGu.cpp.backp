#include "externalRadiationGu.hpp"
#include "electrons.hpp"

externalRadiationGu::externalRadiationGu( scfgp* _cfg, jetGeometry* _r, electrons* _ele, std::string _id ) : energyDissProc( _cfg, _r, _ele, _id ) {
  /* requested parameters */
  cfg -> request<int>("N" + id, 200, &N );
  cfg -> request<double>(id + "e", 1.0, &e );
  cfg -> request<double>(id + "cf", 0.1, &cf );
  cfg -> request<double>(id + "gu", 0.1, &gu );
  cfg -> request<double>(id + "r1", 0, &r1 );
  cfg -> request<double>(id + "r2", 0, &r2 );
  cfg -> request<double>(id + "k1", 1.0, &k1 );
  cfg -> request<double>(id + "k2", 1.0, &k2 );
  cfg -> request<double>(id + "rext", 0, &rext );
  cfg -> request<double>(id + "k", 1.0, &k );
  cfg -> request<double>("Gamma", 10.0, &Gamma );
  cfg -> request<double>("thetaObs", 0.1, &thetaObs );
  cfg -> request<int>("KN", 0, &KN );
  cfg -> request<double>("mBH",1.0,&mBH);
  cfg -> request<double>("eDisk",0.1,&eDisk);
  cfg -> request<double>("mDot",1.0,&mDot);
  cfg -> request<int>(id+"LuminosityConstU",0,&luminosityConstU);  
  cfg -> request<int>(id+"LuminosityConstNu",0,&luminosityConstNu);  
  cfg -> request<std::string>( id+"Strat", "ver2", &strat );


  cfg -> updateRequests( );

  if( strat == "ver1" ) {
    if( r1 == 0.0 || r2 == 0.0 ) { setRadius( ); }
    else { bazinga::warning(id,"Overwritting r1 and r2 values from config file!"); }
  }

  if( strat == "ver2" ) {
    if( rext == 0.0 ) { setRadius( ); }
    else { bazinga::warning(id,"Overwritting rext value from config file!"); }
  }

  if( id == "accdGu" ) {
    double Ledd = 1.3e47*mBH;
    double Ldisk = eDisk*mDot*Ledd;
    double Fdisk = (3.0*G_CONST*mBH*1e09*MSUN)*mDot*Ledd/( DSQR(LIGHT_SPEED)*8.0*M_PI*pow(r2,3.0) );
    double Teff = pow( Fdisk/SIGMA_SB, 0.25 );
    e = 3.92*Teff*K_BOLTZMAN*erg2eV;
  }

  /* allocate space for upe vector */
  upe = gsl_vector_alloc( r->getMaxIndex( ) );
  gsl_vector_set_zero( upe );

  allocateUpeR( );

  vpMin = 0.01*DSQR( ele -> getGammaMin( ) )*getvext( );
  vpMax = 100.0*DSQR( ele -> getGammaMax( ) )*getvext( );

  allocateUpeR( ); // this is for storing vector information about Upe(r) 
  allocateLpv( );
  allocateLvPoint( );
  allocateLvPointAvg( );

  for( int i=0;i<N;i++ ) { set_vp( i, vpMin*pow( vpMax/vpMin,(double)i/((double)N-1)) ); }
 }

externalRadiationGu::~externalRadiationGu( ) {
  freeUpe( );
  freeLpv( );
  freeLvPoint( );
  freeLvPointAvg( );
  freeUpeR( );

  /* free space for upe vector */
  gsl_vector_free( upe );
  upe = NULL; }

double externalRadiationGu::dotg( double g ) {
  double b, val = 0.0;
  b = 4.0*g*getvext( )*PLANCK_H*Gamma/mec2;
  if( b > 1.0 ) { set_KN_info( g ); }
  val = gsl_vector_get( upe, r->getIndex( ) )*inverseCompton::fKN(b,KN); 
  return val; }

double externalRadiationGu::calculateLpv( double v, double theta ) {
  double Int = 0.0;
  double e, miu, ep;

  e = PLANCK_H*v/mec2;
  miu = -( cos(theta)-beta(Gamma) )/( 1.0-beta(Gamma)*cos(theta) );
  ep = getvext( )*PLANCK_H*Gamma/mec2;

  for( int k=0;k<ele->getN( );k++ )
    Int  += bazinga::IntCor( k, ele->getN( ) )*inverseCompton::f( ele->getGamma(k), ep, e, miu )*ele->getNgamma(k)/ele->getGamma(k);

  if( luminosityConstU )
    Int *= gsl_vector_get( upe, 0 )*ele->getdLogGamma( )/pow( getvext( ), 2.0 );
  else 
    Int *= gsl_vector_get( upe, r->getIndex( ) )*ele->getdLogGamma( )/pow( getvext( ), 2.0 );

  Int *= (3.0*SIGMA_T*LIGHT_SPEED)/(4.0*pow(Gamma,2.0));
  Int *= v;
  return Int; }

void externalRadiationGu::setLpv( ) {
  for( int i=0;i<N;i++ ) { set_Lpv( i, calculateLpv( get_vp(i),thetaObs ) ); }
}

double externalRadiationGu::getvext( ) { return e*eV2erg/PLANCK_H; }

void externalRadiationGu::update(  ) {
  double Ledd = 1.3e47*mBH;
  double Ldisk = eDisk*mDot*Ledd;
  double temp_upe = 0.0;
  double temp_gu = 0.0;
  temp_gu = gu;
  /* --- old style - like ext1(2)
  temp_gu *= 1.0/(1.0+pow(r->get()/r1,-k1));
  temp_gu *= 1.0/(1.0+pow(r->get()/r2,k2));
     ------------------------------ */
  /* --- K.Nalewajko (2013) version */
  temp_gu *= pow(r->get()/rext,2)/(1.0+pow(r->get()/rext,k));
  /* ------------------------------ */
  temp_upe = (temp_gu*cf*Ldisk*DSQR(Gamma))/(4.0*M_PI*DSQR(r->get())*LIGHT_SPEED);
  gsl_vector_set( upe, r->getIndex( ), temp_upe );
  bazinga::print_info(id,"Upe",gsl_vector_get( upe, r->getIndex( ) ) );
  set_upe_r( gsl_vector_get( upe, r->getIndex( ) ) );
  flag_upe_r = false; }

void externalRadiationGu::printInfo( ) {
  bazinga::info(id,"Info");
  bazinga::print_info(id,"N",N);
  bazinga::print_info(id,"Avg energy (in external frame)",e,"eV");
  bazinga::print_info(id,"Avg frequency (in external frame)",getvext( ),"Hz");
  bazinga::print_info(id,"Clouds covering factor cf",cf);
  bazinga::print_info(id,"gu factor",gu);
  bazinga::print_info(id,"Using stratification version",strat);
  if( strat == "ver1" ) {
    bazinga::print_info(id,"radius r1",r1,"cm");
    bazinga::print_info(id,"radius r2",r2,"cm");
    bazinga::print_info(id,"strat index k1",k1);
    bazinga::print_info(id,"strat index k2",k2); }
  if( strat == "ver2" ) {
    bazinga::print_info(id,"radius rext",rext,"cm");
    bazinga::print_info(id,"strat index k",k); }
  bazinga::print_info(id,"vpMin",vpMin,"Hz");
  bazinga::print_info(id,"vpMax",vpMax,"Hz");
}

void externalRadiationGu::setRadius( ) {
  double Ledd = 1.3e47*mBH;
  double Ldisk = eDisk*mDot*Ledd;
  double R_sub = 1.6e-5*sqrt( Ldisk );
  if( strat == "ver1" ) {
    if( id == "blrGu" ) {
      r1 = 3.0e17;
      r2 = 3.0e18; }
    if( id == "dtGu" ) {
      r1 = 3.0e18;
      r2 = 3.0e19; }
    if( id == "accdGu" ) {
      r1 = 3.0e14;
      r2 = 3.0e17; }
  }
  if( strat == "ver2" ) {
    if( id == "blrGu" ) { rext = 0.1*R_sub; }
    if( id == "dtGu" ) { rext = R_sub; }
    if( id == "accdGu" ) { rext = 1e15; }
  }
}
